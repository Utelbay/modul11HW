using System;
using System.Collections.Generic;

interface IHotelService
{
    List<Hotel> SearchHotels(string location, string roomClass, decimal maxPrice);
}

interface IBookingService
{
    bool BookRoom(User user, Hotel hotel, DateTime startDate, DateTime endDate);
    List<Booking> GetBookingsForUser(User user);
}

interface IPaymentService
{
    bool ProcessPayment(User user, Booking booking, decimal amount, string paymentMethod);
}

interface INotificationService
{
    void SendBookingConfirmation(User user, Booking booking);
    void SendReminder(User user, Booking booking);
}

interface IUserManagementService
{
    bool RegisterUser(User user);
    User AuthenticateUser(string username, string password);
}

class User
{
    public string Username { get; set; }
    public string Password { get; set; }
    public string Email { get; set; }
}

class Hotel
{
    public string Name { get; set; }
    public string Location { get; set; }
    public Dictionary<string, decimal> RoomTypes { get; set; }
}

class Booking
{
    public User User { get; set; }
    public Hotel Hotel { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public bool IsPaid { get; set; }
}

class HotelService : IHotelService
{
    private List<Hotel> hotels = new List<Hotel>();

    public List<Hotel> SearchHotels(string location, string roomClass, decimal maxPrice)
    {
        return hotels.FindAll(hotel =>
            hotel.Location == location &&
            hotel.RoomTypes.ContainsKey(roomClass) &&
            hotel.RoomTypes[roomClass] <= maxPrice);
    }

    public void AddHotel(Hotel hotel)
    {
        hotels.Add(hotel);
    }
}

class BookingService : IBookingService
{
    private List<Booking> bookings = new List<Booking>();

    public bool BookRoom(User user, Hotel hotel, DateTime startDate, DateTime endDate)
    {
        Booking booking = new Booking
        {
            User = user,
            Hotel = hotel,
            StartDate = startDate,
            EndDate = endDate,
            IsPaid = false
        };
        bookings.Add(booking);
        return true;
    }

    public List<Booking> GetBookingsForUser(User user)
    {
        return bookings.FindAll(b => b.User == user);
    }
}

class PaymentService : IPaymentService
{
    public bool ProcessPayment(User user, Booking booking, decimal amount, string paymentMethod)
    {
        Console.WriteLine($"Payment of {amount} processed for user {user.Username} via {paymentMethod}");
        booking.IsPaid = true;
        return true;
    }
}

class NotificationService : INotificationService
{
    public void SendBookingConfirmation(User user, Booking booking)
    {
        Console.WriteLine($"Booking confirmation sent to {user.Email} for {booking.Hotel.Name}");
    }

    public void SendReminder(User user, Booking booking)
    {
        Console.WriteLine($"Reminder sent to {user.Email} for booking at {booking.Hotel.Name}");
    }
}

class UserManagementService : IUserManagementService
{
    private List<User> users = new List<User>();

    public bool RegisterUser(User user)
    {
        if (users.Exists(u => u.Username == user.Username))
        {
            Console.WriteLine("Username already exists.");
            return false;
        }
        users.Add(user);
        return true;
    }

    public User AuthenticateUser(string username, string password)
    {
        return users.Find(u => u.Username == username && u.Password == password);
    }
}

class UserInterface
{
    private IUserManagementService userService;
    private IHotelService hotelService;
    private IBookingService bookingService;
    private IPaymentService paymentService;
    private INotificationService notificationService;

    public UserInterface(
        IUserManagementService userService,
        IHotelService hotelService,
        IBookingService bookingService,
        IPaymentService paymentService,
        INotificationService notificationService)
    {
        this.userService = userService;
        this.hotelService = hotelService;
        this.bookingService = bookingService;
        this.paymentService = paymentService;
        this.notificationService = notificationService;
    }

    public void Run()
    {
        User user = new User { Username = "john_doe", Password = "password123", Email = "john@example.com" };
        userService.RegisterUser(user);
        User loggedInUser = userService.AuthenticateUser("john_doe", "password123");

        if (loggedInUser != null)
        {
            List<Hotel> hotels = hotelService.SearchHotels("NYC", "Deluxe", 200);
            if (hotels.Count > 0)
            {
                Hotel selectedHotel = hotels[0];
                bookingService.BookRoom(loggedInUser, selectedHotel, DateTime.Today, DateTime.Today.AddDays(3));
                
                Booking booking = bookingService.GetBookingsForUser(loggedInUser)[0];
                paymentService.ProcessPayment(loggedInUser, booking, selectedHotel.RoomTypes["Deluxe"], "Credit Card");
                notificationService.SendBookingConfirmation(loggedInUser, booking);
            }
            else
            {
                Console.WriteLine("No hotels found.");
            }
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        IUserManagementService userService = new UserManagementService();
        IHotelService hotelService = new HotelService();
        IBookingService bookingService = new BookingService();
        IPaymentService paymentService = new PaymentService();
        INotificationService notificationService = new NotificationService();

        UserInterface ui = new UserInterface(userService, hotelService, bookingService, paymentService, notificationService);
        ui.Run();
    }
}
